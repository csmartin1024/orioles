{"version":3,"sources":["data/Database.js","utils/functions.js","components/ContourPlot.js","components/PieChart.js","components/BarChart.js","components/PlayerBreakdown.js","App.js","components/ContourPlot2.js","serviceWorker.js","index.js"],"names":["pseudoPitchDataLookup","605164","502171","pseudoPitcherDataLookup","name","Database","getPlayerData","playerId","player","pitchData","chanceOfHit","vel","plate_x","plate_z","Math","tanh","ContourPlot","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","velocity","updateVelocity","bind","assertThisInitialized","event","target","value","setState","playerPitchXValues","playerPitchYValues","xValues","linspace","yValues","zMatrix","i","Array","j","strikes","length","pitch","indexOf","pitch_call","push","react_default","a","createElement","react_plotly_default","data","x","y","z","type","autocontour","ncontours","contours","hoverinfo","mode","marker","size","color","symbol","selected","layout","width","height","title","min","max","onChange","className","id","Component","PieChart","pitchTypeCount","count","tagged_pitch_type","undefined","pitchTypes","keys","pitchTypeCounts","values","pitchTypeAverages","labels","showlegend","hole","textinfo","strikeCount","pitchTypeStrikeAverages","PlayerBreakdown","_this$props$player","ContourPlot_ContourPlot","PieChart_PieChart","BarChart_PieChart","Layout","window","innerHeight","innerWidth","updateDimensions","addEventListener","removeEventListener","playerA","playerB","style","display","backgroundColor","flexDirection","flex","overflow","PlayerBreakdown_PlayerBreakdown","App","App_Layout","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.208679fb.chunk.js","sourcesContent":["\n//basically getting the data from the \"database\" which is really just a json file for now\n//Also, in a real react app, i would have an action dispensed and that would inject the players data into\n//the state, but alas prototypes gotta protoype\nimport dbundy from './dylanbundy.json'\nimport acobb from './alexcobb.json'\n\nconst pseudoPitchDataLookup = {\n  '605164':dbundy,\n  '502171':acobb,\n}\n\nconst pseudoPitcherDataLookup = {\n  '605164':{name:\"Dylan Bundy\"},\n  '502171':{name:\"Alex Cobb\"},\n}\n\nconst Database = \n{\n  getPlayerData:(playerId) =>\n  {\n    const player = pseudoPitcherDataLookup[playerId];\n    player.pitchData = pseudoPitchDataLookup[playerId];\n    return player;\n  }\n}\n\nexport default Database;","export const chanceOfHit = (vel,plate_x, plate_z) =>\n{\n  return -0.2168 - 0.0043 * Math.tanh(0.5 * (-67.7856 + 0.5504 * \n    vel + 6.7840 * plate_z  - 7.0900 * plate_x)) - 0.2951 * Math.tanh(0.5 * \n    (-2.2518 - 0.0236 * vel + 1.4241 * plate_z  + 0.6548 * plate_x)) + \n    0.1418 * Math.tanh(0.5 * (-5.4668 + 0.0354 * vel + 2.2263 * plate_z  - 2.6540 * plate_x))\n  - 0.2735 * Math.tanh(0.5 * (0.5539 + 0.0134 * vel  - 1.0178 * plate_z  - 1.2269 * plate_x))\n  - 0.0152 * Math.tanh(0.5 * (-61.8711 + 0.6910 * vel  - 1.1399 * plate_z  - 2.5312 * plate_x))\n}\n\n// export chanceOfHit;\n\n// const Database = \n// {\n//   getPlayerData:(playerId) =>\n//   {\n//     const player = pseudoPitcherDataLookup[playerId];\n//     player.pitchData = pseudoPitchDataLookup[playerId];\n//     return player;\n//   }\n// }","import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\nimport linspace from 'linspace';\nimport {chanceOfHit} from '../utils/functions';\n\nexport default class ContourPlot extends Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state = {velocity:70};\n    this.updateVelocity =this.updateVelocity.bind(this);\n  }\n  updateVelocity(event)\n  {\n    let velocity = event.target.value;\n    this.setState({velocity})\n  }\n  render()\n  {\n    const pitchData = this.props.pitchData;\n    const size = 50;\n    const playerPitchXValues = [];\n    const playerPitchYValues = [];\n    const xValues = linspace(-1,1,size);\n    const yValues = linspace(1.6,3.4,size);\n    const zMatrix = [];\n\n    for(let i = 0; i < size; i++) \n    {\n      zMatrix[i] = new Array(size); // defining mxn matrix\n    }\n\n    for(let i = 0; i < size; i++) \n    {\n      for(let j = 0; j < size; j++) \n      {\n        const plate_x = xValues[i];\n        const plate_z = yValues[j];\n        zMatrix[i][j] = chanceOfHit(this.state.velocity,plate_x,plate_z) // filling mxn matrix with chances\n      }\n    }\n\n    const strikes = [];\n\n    for(let i = 0; i < pitchData.length; i++)\n    {\n      let pitch = pitchData[i];\n      playerPitchXValues[i] = pitch.plate_x;\n      playerPitchYValues[i] = pitch.plate_z;\n\n      if(['StrikeCalled','StrikeSwinging'].indexOf(pitch.pitch_call) >= 0)\n      {\n        strikes.push(i);\n      }\n      // console.log(pitch.plate_z)\n    }\n\n    // console.log('--------retainerrrrr---------');\n\n    // alert(playerPitchXValues[0] + ' -- ' + playerPitchYValues[0])\n    return (\n      <div>\n        <Plot\n          data={[\n            {\n              x: xValues,\n              y: yValues,\n              z: zMatrix,\n              type: 'contour',\n              // mode: 'markers',\n              autocontour: false,\n              ncontours:30,\n              // x0:-1,\n              // dx:0.25,\n              // x0: -1.5,\n              // dx: 0.05,\n              // dy: 0.05,\n              // y0: 1.5,\n              // xaxis: {range: [2, 5]},\n              // yaxis: {range: [2, 5]},\n              contours: {\n                // start: -0.02,\n                // end: 0.02,\n                // size:0.5,\n                // coloring:'fill'\n                // coloring: 'lines'\n            },\n              hoverinfo:\"none\",\n              // contours:{coloring:'heatmap'}\n            },\n            {\n              x: playerPitchXValues,\n              y: playerPitchYValues,\n              // opacity:0.5,\n              mode: 'markers',\n              type: 'scatter',\n              marker:{\n                size: 3,\n                color:\"#000000\",\n                symbol:'circle-open'\n              },\n              // selectedpoints: strikes,\n              selected: {\n                marker: {\n                  size: 2,\n                  color:'purple',\n                  symbol: 'diamond-open'\n                },\n              },\n            }\n          ]}\n          layout={ {width: 500, height: 500, title: ''} }\n        />\n        <div>\n          <input min=\"70\" max=\"100\" type=\"number\" value = {this.state.velocity} onChange={this.updateVelocity}/>\n          <input onChange={this.updateVelocity} type=\"range\" min=\"70\" max=\"100\" value={this.state.velocity} className=\"slider\" id=\"myRange\"></input>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\n\nexport default class PieChart extends Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n  render()\n  {\n    const pitchData = this.props.pitchData;\n    const pitchTypeCount = {};    // a map of type of pitches to the number of them thrown eg: Fastball:22\n    // const pitchTypes = [];        // A list of the types of pitches thrown eg: Fastball, Curveball, etc...\n    // const pitchTypeCounts = [];   // A flat list of the counts of pitches eg: 22, 10, etc... (this aligns with the types above)\n    // const pitchTypeAverages = [];\n\n    for(let i = 0; i < pitchData.length; i++)\n    {\n      let pitch = pitchData[i];\n      let count = pitchTypeCount[pitch.tagged_pitch_type];\n      \n      if(count === undefined)\n      {\n        count = 0;\n      }\n      \n      count += 1;\n      pitchTypeCount[pitch.tagged_pitch_type] = count;\n    }\n\n    const pitchTypes = Object.keys(pitchTypeCount);        // A list of the types of pitches thrown eg: Fastball, Curveball, etc...\n    const pitchTypeCounts = Object.values(pitchTypeCount);   // A flat list of the counts of pitches eg: 22, 10, etc... (this aligns with the types above)\n    const pitchTypeAverages = [];\n\n    for(let i = 0; i < pitchTypeCounts.length; i++)\n    {\n      pitchTypeAverages[i] = (pitchTypeCounts[i] / pitchData.length) * 100;\n    }\n\n    return (\n      <div>\n        <Plot\n          data={[\n            {\n              // x:pitchTypes,\n              // y:pitchTypeAverages,\n              values: pitchTypeAverages,\n              // marker:{\n              //   symbol:\"none\"\n              // },\n              labels: pitchTypes,\n              hoverinfo:\"percent+label\",\n              showlegend:false,\n              type: 'pie',\n              // type: 'bar',\n              hole: .4,\n              textinfo: 'label'\n            }\n          ]}\n          layout={ {width: 500, height: 500, title:'Pitch Type Percentage'} }\n          />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\n\nexport default class PieChart extends Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n  render()\n  {\n    const pitchData = this.props.pitchData;\n    const playerPitchXValues = [];\n    const playerPitchYValues = [];\n\n    const pitchTypeCount = {};\n    let strikeCount = 0;\n\n    for(let i = 0; i < pitchData.length; i++)\n    {\n      let pitch = pitchData[i];\n      let count = pitchTypeCount[pitch.tagged_pitch_type];\n      \n      if(count === undefined)\n      {\n        count = 0;\n      }\n\n      if(['StrikeCalled','StrikeSwinging'].indexOf(pitch.pitch_call) >= 0)\n      {\n        count += 1;\n        strikeCount +=1;\n        pitchTypeCount[pitch.tagged_pitch_type] = count;\n      }\n    }\n\n    const pitchTypes = Object.keys(pitchTypeCount);        // A list of the types of pitches thrown eg: Fastball, Curveball, etc...\n    const pitchTypeCounts = Object.values(pitchTypeCount);   // A flat list of the counts of pitches eg: 22, 10, etc... (this aligns with the types above)\n    const pitchTypeStrikeAverages = [];\n\n    for(let i = 0; i < pitchTypeCounts.length; i++)\n    {\n      pitchTypeStrikeAverages[i] = (pitchTypeCounts[i] / strikeCount) * 100;\n    }\n\n    // const pitchTypeKeys = Object.keys(pitchTypeCount);\n\n    // for(var i = 0; i < pitchTypeKeys.length; i++)\n    // {\n    //   let pitchTypeKey = pitchTypeKeys[i];\n    //   let pitchType = pitchTypeCount[pitchTypeKey];\n    //   pitchTypes[i] = pitchTypeKey;\n    //   pitchTypeCounts[i] = pitchType;\n    // }\n\n    return (\n      <div>\n        <Plot\n          data={[\n            {\n              x: pitchTypes,\n              y: pitchTypeStrikeAverages,\n              // values: pitchTypeStrikeAverages,\n              // labels: pitchTypes,\n              // mode: 'markers',\n              type: 'bar'\n            }\n          ]}\n          layout={ {width: 500, height: 500, title: 'Pitch Type Count'} }\n          />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport ContourPlot from './ContourPlot';\nimport PieChart from './PieChart';\nimport BarChart from './BarChart';\n\nexport default class PlayerBreakdown extends Component\n{\n  render()\n  {\n    const {name, pitchData} = this.props.player;\n\n    return (\n      <div>\n        <h1>{name}</h1>\n        <ContourPlot pitchData={pitchData} />\n        <PieChart pitchData={pitchData} />\n        <BarChart pitchData={pitchData} />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Database from './data/Database';\nimport PlayerBreakdown from './components/PlayerBreakdown';\nimport ContourPlot2 from './components/ContourPlot2';\n\nclass Layout extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = \n        {\n          height:window.innerHeight, \n          width:window.innerWidth\n        };\n        this.updateDimensions = this.updateDimensions.bind(this);\n    }\n    \n    componentDidMount()\n    {\n      window.addEventListener(\"resize\", this.updateDimensions);\n    }\n    componentWillUnmount()\n    {\n      window.removeEventListener(\"resize\", this.updateDimensions);\n    }\n    updateDimensions()\n    {\n      this.setState({height:window.innerHeight, width:window.innerWidth});\n    }\n\n    render() {\n\n      const playerA_ID = '605164'; // this would ideally be able to be passed in from a page param\n      const playerB_ID = '502171'; // ditto\n\n      const playerA = Database.getPlayerData(playerA_ID);\n      const playerB = Database.getPlayerData(playerB_ID);\n\n      return (\n        <div style={{display:'flex', backgroundColor:'',flexDirection:'row', flex:1, height:this.state.height}}>\n          <div style={{backgroundColor:'#C9C9C9',flex:1, overflow: 'scroll'}}>\n            <PlayerBreakdown player={playerA} />\n              {/* <ContourPlot2 pitchData={playerA.pitchData} pitchData2={playerB.pitchData} /> */}\n          </div>\n          <div style={{backgroundColor:'#898989',flex:1, overflow: 'scroll'}}>\n            <PlayerBreakdown player={playerB} />\n          </div>\n        </div>\n      )\n    }\n}\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\nimport linspace from 'linspace';\nimport {chanceOfHit} from '../utils/functions';\n\nexport default class ContourPlot2 extends Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state = {velocity:70};\n    this.updateVelocity =this.updateVelocity.bind(this);\n  }\n  updateVelocity(event)\n  {\n    let velocity = event.target.value;\n    this.setState({velocity})\n  }\n  render()\n  {\n    const {pitchData, pitchData2} = this.props;\n    const size = 50;\n    const xValues = linspace(-1,1,size);\n    const yValues = linspace(1.6,3.4,size);\n    const zMatrix = [];\n\n    for(let i = 0; i < size; i++) \n    {\n      zMatrix[i] = new Array(size); // defining mxn matrix\n    }\n\n    for(let i = 0; i < size; i++) \n    {\n      for(let j = 0; j < size; j++) \n      {\n        const plate_x = xValues[i];\n        const plate_z = yValues[j];\n        zMatrix[i][j] = chanceOfHit(this.state.velocity,plate_x,plate_z) // filling mxn matrix with chances\n      }\n    }\n\n    const playerPitchXValues = [];\n    const playerPitchYValues = [];\n\n    for(let i = 0; i < pitchData.length; i++)\n    {\n      let pitch = pitchData[i];\n      playerPitchXValues[i] = pitch.plate_x;\n      playerPitchYValues[i] = pitch.plate_z;\n    }\n\n    const playerPitchXValues2 = [];\n    const playerPitchYValues2 = [];\n    \n    for(let i = 0; i < pitchData2.length; i++)\n    {\n      let pitch = pitchData2[i];\n      playerPitchXValues2[i] = pitch.plate_x;\n      playerPitchYValues2[i] = pitch.plate_z;\n    }\n\n    // console.log('--------retainerrrrr---------');\n\n    return (\n      <div>\n        <Plot\n          data={[\n            {\n              x: xValues,\n              y: yValues,\n              z: zMatrix,\n              type: 'contour',\n              // mode: 'markers',\n              autocontour: false,\n              ncontours:30,\n              // x0:-1,\n              // dx:0.25,\n              // x0: -1.5,\n              // dx: 0.05,\n              // dy: 0.05,\n              // y0: 1.5,\n              // xaxis: {range: [2, 5]},\n              // yaxis: {range: [2, 5]},\n              contours: {\n                // start: -0.02,\n                // end: 0.02,\n                // size:0.5,\n                // coloring:'fill'\n                // coloring: 'lines'\n            },\n              hoverinfo:\"none\",\n              // contours:{coloring:'heatmap'}\n            },\n            {\n              x: playerPitchXValues,\n              y: playerPitchYValues,\n              // opacity:0.5,\n              mode: 'markers',\n              type: 'scatter',\n              marker:{\n                size:2,\n                color:\"#000000\",\n                symbol:'circle-open'\n              }\n            },\n            {\n              x: playerPitchXValues2,\n              y: playerPitchYValues2,\n              // opacity:0.5,\n              mode: 'markers',\n              type: 'scatter',\n              marker:{\n                size:2,\n                color:\"#FFFFFF\",\n                symbol:'circle-open'\n              }\n            }\n          ]}\n          layout={ {width: 500, height: 500, title: ''} }\n        />\n        <div>\n          <input min=\"70\" max=\"100\" type=\"number\" value = {this.state.velocity} onChange={this.updateVelocity}/>\n          <input onChange={this.updateVelocity} type=\"range\" min=\"70\" max=\"100\" value={this.state.velocity} className=\"slider\" id=\"myRange\"></input>\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}